/* _mixins.scss */

@mixin clearfix { overflow: hidden; }

/* Let's not even care about IE6/7, http://www.cssmojo.com/latest_new_clearfix_so_far/ */
@mixin clearfix-overflow-visible {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder { @content }
  &:-moz-placeholder { @content }
  &::-moz-placeholder { @content }
  &:-ms-input-placeholder { @content}
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}

@mixin opacity($opacity) {
  $opacity-ie: $opacity * 100;
  opacity: $opacity;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacity-ie + ")";
  filter: alpha(opacity=$opacity-ie);
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor;
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor));
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor);
  background-image: -moz-linear-gradient(top, $fromColor, $toColor);
  background-image: -ms-linear-gradient(top, $fromColor, $toColor);
  background-image: linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin linear-gradient-horizontal($fromColor, $toColor) {
  background-color: $toColor;
  background: -webkit-gradient(linear, left top, right top, color-stop(0%, $fromColor), color-stop(100%, $toColor));
  background: -webkit-linear-gradient(left, $fromColor 0%, $toColor 100%);
  background: -moz-linear-gradient(left, $fromColor 0%, $toColor 100%);
  background: -ms-linear-gradient(left, $fromColor 0%, $toColor 100%);
  background: linear-gradient(to right, $fromColor 0%, $toColor 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name { @content; }
  @-moz-keyframes $animation-name { @content; }
  @-ms-keyframes $animation-name { @content; }
  @keyframes $animation-name { @content; }
}

@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -ms-animation: $animation;
  animation: $animation;
}

@mixin transition($transitions...) {
  -webkit-transition: $transitions;
  -moz-transition: $transitions;
  -ms-transition: $transitions;
  transition: $transitions;
}

@mixin transition-delay($delay) {
  -webkit-transition-delay: $delay;
  -moz-transition-delay: $delay;
  -ms-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin transform($transforms...) {
  -webkit-transform: $transforms;
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  transform: $transforms;
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin transform-perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  -ms-perspective: $perspective;
  perspective: $perspective;
}

@mixin user-select($user-select) {
  -webkit-user-select: $user-select;
  -moz-user-select: $user-select;
  -ms-user-select: $user-select;
  user-select: $user-select;
}

@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model;
  -moz-box-sizing: $box-model;
  box-sizing: $box-model;
}

///
/// Creates a triangle on one of the edges of an element
/// http://codepen.io/eduardoboucas/pen/JomROG
///
/// @author Eduardo Boucas
///
/// @param {String}   $pos - Which edge to create the triangle on
/// @param {Length}   $offset - The offset from the origin (top or left) on the edge
/// @param {String}   $direction - Direction of the triangle (in or out)
/// @param {Length}   $width - Width of the triangle
/// @param {String}   $type - Type of the pseudo-element (before or after)
///
/// @example scss - A triangle on the left edge of the parent, 15px from the top, pointing out with a width of 30px
///  @include triangle('left', 15px, 'out', 30px);
///
/// @example scss - A triangle on the bottom edge of the parent, 220px from the left, pointing out, with a width of 60px and using a :before
///  @include triangle('bottom', 220px, 'out', 60px, 'before');
///

@mixin triangle($pos, $offset, $direction, $width, $type: 'after') {
  position: relative;
  
  &:#{$type} {
    position: absolute;
    content: '';
    z-index: 9999;
    
    // Reset position and offsets
    top: auto;
    bottom: auto;
    left: auto;
    right: auto;
    $hOffset: 0;
    $vOffset: 0;
    
    // Triangle: down
    @if ((($pos == 'top') and ($direction == 'in')) or ($pos == 'bottom') and ($direction == 'out')) {
      border-top: $width solid currentColor;
      border-right: $width solid transparent;
      border-bottom: none;
      border-left: $width solid transparent;
      
      $vOffset: if($direction == 'in', 0, -$width);
    }
    
    // Triangle: up
    @if ((($pos == 'top') and ($direction == 'out')) or ($pos == 'bottom') and ($direction == 'in')) {
      border-top: none;
      border-right: $width solid transparent;
      border-bottom: $width solid currentColor;
      border-left: $width solid transparent;
      
      $vOffset: if($direction == 'in', 0, -$width);
    }
    
    // Triangle: right
    @if ((($pos == 'left') and ($direction == 'in')) or ($pos == 'right') and ($direction == 'out')) {
      border-top: $width solid transparent;
      border-right: none;
      border-bottom: $width solid transparent;
      border-left: $width solid currentColor;
      
      $hOffset: if($direction == 'in', 0, -$width);
    }
    
    // Triangle: left
    @if ((($pos == 'left') and ($direction == 'out')) or ($pos == 'right') and ($direction == 'in')) {
      border-top: $width solid transparent;
      border-right: $width solid currentColor;
      border-bottom: $width solid transparent;
      border-left: none;
      
      $hOffset: if($direction == 'in', 0, -$width);
    }
    
    @if ($pos == 'top') {
      top: $vOffset;
      left: if($offset == 'center', calc(50% - #{$width}), $offset);
    } @else if ($pos == 'bottom') {
      bottom: $vOffset;
      left: if($offset == 'center', calc(50% - #{$width}), $offset);
    } @else if ($pos == 'left') {
      top: if($offset == 'center', calc(50% - #{$width}), $offset);
      left: $hOffset;
    } @else if ($pos == 'right') {
      top: if($offset == 'center', calc(50% - #{$width}), $offset);
      right: $hOffset;
    }
  }
}
