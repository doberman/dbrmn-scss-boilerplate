/* _utils.scss */

$global-font-size: 100% !default;

/* General */

.hide { display: none !important; }

.clearfix { @include clearfix; }

.clearfix-overflow-visible { @include clearfix-overflow-visible; }

.fluid { width: 100%; }

.left { float: left; }

.right { float: right; }

.inline { display: inline; }

.block { display: block; }

.inline-block { display: inline-block; }

.pointer { cursor: pointer; }

.center { text-align: center; }

.no-transition { transition: none !important; }

/* Typography */

.uppercase { text-transform: uppercase; }

.white { color: $color-white; }

.black { color: $color-black; }

/* Base-margin and base-padding */

.base-margin { margin: $base-unit; }

.base-margin-top { margin-top: $base-unit; }

.base-margin-bottom { margin-bottom: $base-unit; }

.base-margin-left { margin-left: $base-unit; }

.base-margin-right { margin-right: $base-unit; }

@for $i from 2 through 5 {
  $base-multiplied: $i * $base-unit;

  .base-margin-x#{$i} { margin: $base-multiplied; }

  .base-margin-top-x#{$i} { margin-top: $base-multiplied; }

  .base-margin-bottom-x#{$i} { margin-bottom: $base-multiplied; }

  .base-margin-left-x#{$i} { margin-left: $base-multiplied; }

  .base-margin-right-x#{$i} { margin-right: $base-multiplied; }
}

.base-padding { padding: $base-unit; }

.base-padding-top { padding-top: $base-unit; }

.base-padding-bottom { padding-bottom: $base-unit; }

.base-padding-left { padding-left: $base-unit; }

.base-padding-right { padding-right: $base-unit; }

.base-padding-sm { padding: 0 $base-unit * 1.8; }

@for $i from 2 through 5 {
  $base-multiplied: $i * $base-unit;

  .base-padding-x#{$i} { padding: $base-multiplied; }

  .base-padding-top-x#{$i} { padding-top: $base-multiplied; }

  .base-padding-bottom-x#{$i} { padding-bottom: $base-multiplied; }

  .base-padding-left-x#{$i} { padding-left: $base-multiplied; }

  .base-padding-right-x#{$i} { padding-right: $base-multiplied; }
}
$global-font-size: 100% !default;

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Converts one or more pixel values into matching rem values.
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  @if $count == 1 {
    @return to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function bp-to-em($value) {
  // Pixel and unitless values are converted to rems
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  // Then the value is converted to ems
  @return strip-unit($value) * 1em;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
@function to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Calculate rem if units for $value is not rem
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}
